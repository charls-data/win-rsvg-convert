name: Build Windows Static rsvg-convert (Modern Meson)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  HOST: x86_64-w64-mingw32
  PREFIX: /usr/${{ env.HOST }}
  MESON_CROSS_FILE: ${{ github.workspace }}/cross-file.ini

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          meson \
          ninja-build \
          mingw-w64 \
          upx-ucl \
          pkg-config \
          python3-pip \
          ccache
        
        # 安装交叉编译依赖库
        sudo apt-get install -y \
          libglib2.0-dev:${{ env.HOST }} \
          libfreetype-dev:${{ env.HOST }} \
          libpng-dev:${{ env.HOST }}

    - name: Setup cross file
      run: |
        cat > cross-file.ini <<EOF
        [binaries]
        c = '${{ env.HOST }}-gcc'
        cpp = '${{ env.HOST }}-g++'
        ar = '${{ env.HOST }}-ar'
        pkgconfig = '${{ env.HOST }}-pkg-config'
        windres = '${{ env.HOST }}-windres'

        [host_machine]
        system = 'windows'
        cpu_family = 'x86_64'
        cpu = 'x86_64'
        endian = 'little'

        [properties]
        pkg_config_libdir = '${{ env.PREFIX }}/lib/pkgconfig'
        c_args = ['-static', '-Os']
        c_link_args = ['-static', '-Wl,--gc-sections']
        EOF

    - name: Build cairo (Meson)
      run: |
        # 下载最新版 cairo
        curl -L https://gitlab.freedesktop.org/cairo/cairo/-/archive/1.18.0/cairo-1.18.0.tar.gz | tar xz
        cd cairo-1.18.0

        meson setup build \
          --cross-file ${{ env.MESON_CROSS_FILE }} \
          --prefix=${{ env.PREFIX }} \
          --buildtype=release \
          --default-library=static

        meson compile -C build
        sudo meson install -C build

    - name: Build librsvg
      run: |
        # 下载 librsvg
        curl -L https://download.gnome.org/sources/librsvg/2.60/librsvg-2.60.0.tar.xz | tar xJ
        cd librsvg-2.60.0

        meson setup build \
          --cross-file ${{ env.MESON_CROSS_FILE }} \
          --prefix=${{ env.PREFIX }} \
          --buildtype=release \
          --default-library=static \
          -Dintrospection=disabled

        meson compile -C build
        meson install -C build

        # 优化输出
        mkdir -p artifacts
        ${{ env.HOST }}-strip ${{ env.PREFIX }}/bin/rsvg-convert.exe -o artifacts/rsvg-convert.exe
        upx --best --lzma artifacts/rsvg-convert.exe -o artifacts/rsvg-convert-upx.exe

    - name: Verify binary
      run: |
        file artifacts/rsvg-convert-upx.exe
        ! ${HOST}-objdump -p artifacts/rsvg-convert-upx.exe | grep "DLL Name"
        ls -lh artifacts/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rsvg-convert-windows
        path: artifacts/

    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/rsvg-convert-upx.exe
        body: |
          Statically linked Windows build
          - Toolchain: ${{ env.HOST }}
          - Build system: Meson
          - Compression: UPX LZMA
          - Size: $(ls -lh artifacts/rsvg-convert-upx.exe | awk '{print $5}')