# .github/workflows/windows-librsvg.yml
name: Build librsvg on Windows

on:
  push:

jobs:
  build-windows:
    runs-on: windows-2019

    env:
      INST: ${{ github.workspace }}\rsvg.ci.bin
      LIBXML2_VER: 2.12.6
      FREETYPE2_VER: 2.13.0
      PKG_CONFIG_VER: 0.29.2
      RUST_HOST: x86_64-pc-windows-msvc
      DOWNGRADE_RUST_VERSION: '1'
      MSYS2_BINDIR: C:\msys64\usr\bin

    steps:
      - uses: actions/checkout@v3

      - name: Install MSYS2 and GNU tools
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: |
            tar
            gzip
            xz
            wget
            patch
            bzip2

      - name: Set up MSVC x64 environment
        shell: cmd
        run: |
          call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64

      - name: Upgrade pip & install Meson
        run: pip3 install --upgrade --user "meson~=1.2"

      - name: Clone GNOME dependencies
        shell: cmd
        run: |
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/gdk-pixbuf.git
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/pango.git
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/librsvg.git

      - name: Build GDK-Pixbuf (and glib/png/jpeg)
        shell: cmd
        run: |
          set INST_PSX=%INST:\=/%
          md _build_gdk_pixbuf
          cd _build_gdk_pixbuf
          meson setup ..\gdk-pixbuf --buildtype=release --prefix=%INST_PSX% -Dman=false
          ninja install
          cd ..
          rmdir /s /q _build_gdk_pixbuf
          copy /b %INST%\lib\z.lib %INST%\lib\zlib.lib

      - name: Download & unpack pkg-config, FreeType, libxml2
        shell: cmd
        run: |
          set PATH=%MSYS2_BINDIR%;%PATH%
          if not exist %USERPROFILE%\.cargo\bin\rustup.exe %MSYS2_BINDIR%\wget https://static.rust-lang.org/rustup/dist/%RUST_HOST%/rustup-init.exe -O rustup-init.exe
          %MSYS2_BINDIR%\wget https://pkgconfig.freedesktop.org/releases/pkg-config-%PKG_CONFIG_VER%.tar.gz
          %MSYS2_BINDIR%\wget https://downloads.sourceforge.net/freetype/freetype-%FREETYPE2_VER%.tar.xz
          %MSYS2_BINDIR%\wget https://download.gnome.org/sources/libxml2/2.12/libxml2-%LIBXML2_VER%.tar.xz
          %MSYS2_BINDIR%\wget --content-disposition https://wrapdb.mesonbuild.com/v2/libxml2_%LIBXML2_VER%-1/get_patch
          %MSYS2_BINDIR%\tar -xf pkg-config-%PKG_CONFIG_VER%.tar.gz
          %MSYS2_BINDIR%\tar -Jxf freetype-%FREETYPE2_VER%.tar.xz
          %MSYS2_BINDIR%\tar -Jxf libxml2-%LIBXML2_VER%.tar.xz
          python -c "import zipfile; zipfile.ZipFile('libxml2_%LIBXML2_VER%-1_patch.zip','r').extractall()"
          del /f /q pkg-config-%PKG_CONFIG_VER%.tar.gz freetype-%FREETYPE2_VER%.tar.xz libxml2-%LIBXML2_VER%.tar.xz libxml2_%LIBXML2_VER%-1_patch.zip

      - name: Build pkg-config
        shell: cmd
        run: |
          cd pkg-config-%PKG_CONFIG_VER%
          %MSYS2_BINDIR%\patch -p1 < "%GITHUB_WORKSPACE%\ci\pkgconfig.nmake.patch"
          set PATH=%INST%\bin;%PATH%
          nmake /f Makefile.vc CFG=release
          copy /b release\x64\pkg-config.exe %INST%\bin
          nmake /f Makefile.vc CFG=release clean
          cd ..

      - name: Build FreeType
        shell: cmd
        run: |
          set INST_PSX=%INST:\=/%
          md _build_ft
          cd _build_ft
          meson setup ..\freetype-%FREETYPE2_VER% --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST%
          ninja install
          cd ..
          rmdir /s /q _build_ft

      - name: Build libxml2
        shell: cmd
        run: |
          set INST_PSX=%INST:\=/%
          md _build_libxml
          cd _build_libxml
          meson setup ..\libxml2-%LIBXML2_VER% --buildtype=release --prefix=%INST_PSX% -Diconv=disabled --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST%
          ninja install
          cd ..
          rmdir /s /q _build_libxml

      - name: Build Pango (with HarfBuzz & Cairo)
        shell: cmd
        run: |
          set INST_PSX=%INST:\=/%
          md _build_pango
          cd _build_pango
          meson setup ..\pango --buildtype=release --prefix=%INST_PSX% -Dfontconfig=disabled --pkg-config-path=%INST%\lib\pkgconfig
          ninja install
          cd ..
          rmdir /s /q _build_pango

      - name: Install Rust & cargo-c
        shell: cmd
        run: |
          if exist %USERPROFILE%\.cargo\bin\rustup.exe (
            %USERPROFILE%\.cargo\bin\rustup update
          ) else (
            rustup-init.exe -y --default-toolchain=stable-%RUST_HOST% --default-host=%RUST_HOST%
          )
          if not exist %USERPROFILE%\.cargo\bin\cargo-cbuild.exe (
            %USERPROFILE%\.cargo\bin\cargo install cargo-c
          )

      - name: Build librsvg
        shell: cmd
        run: |
          cd librsvg
          set PATH=%PATH%;%USERPROFILE%\.cargo\bin
          set PKG_CONFIG=%INST%\bin\pkg-config.exe
          set INST_PSX=%INST:\=/%
          md msvc-build 2>nul
          cd msvc-build

          if exist %INST%\lib\libpcre2-8.a copy /b %INST%\lib\libpcre2-8.a %INST%\lib\pcre2-8.lib

          if not "%DOWNGRADE_RUST_VERSION%"=="1" goto normal_rust
            set RUST_DOWNGRADE_VER=1.82.0
            %USERPROFILE%\.cargo\bin\rustup install %RUST_DOWNGRADE_VER%-%RUST_HOST%
            meson setup .. --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST% -Dtriplet=%RUST_HOST% -Drustc-version=%RUST_DOWNGRADE_VER%
            goto cont
          :normal_rust
            meson setup .. --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST%
          :cont
          ninja
          ninja test
          ninja install

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: librsvg-install
          path: rsvg.ci.bin
