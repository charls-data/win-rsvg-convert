name: Build rsvg-convert 2.60.0 (MXE + Rust, static Win64)

on:
  push:                     # 仅 push 触发；可自行加 branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04   # GitHub 现行 LTS runner

    steps:
    # 1) 检出当前仓库 ── 这里只用来保存产物
    - uses: actions/checkout@v4
      with: { fetch-depth: 1 }

    # 2) 配置 MXE APT 源（固定为 focal）并导入 GPG key
    - name: Add MXE APT repo (focal on jammy host)
      run: |
        sudo mkdir -p /usr/share/keyrings
        curl -fsSL https://pkg.mxe.cc/repos/apt/conf/86B72ED9.gpg \
          | sudo tee /usr/share/keyrings/mxe-archive-keyring.gpg >/dev/null
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/mxe-archive-keyring.gpg] \
             https://pkg.mxe.cc/repos/apt focal main" \
          | sudo tee /etc/apt/sources.list.d/mxe.list
        sudo apt-get update

    # 3) 安装交叉工具链 + 静态依赖
    - name: Install MXE toolchain & libs
      run: |
        sudo apt-get install -y \
          mxe-x86-64-w64-mingw32.static-gcc \
          mxe-x86-64-w64-mingw32.static-pkgconf \
          mxe-x86-64-w64-mingw32.static-glib2 \
          mxe-x86-64-w64-mingw32.static-cairo \
          mxe-x86-64-w64-mingw32.static-pango \
          mxe-x86-64-w64-mingw32.static-gdk-pixbuf \
          mxe-x86-64-w64-mingw32.static-harfbuzz \
          mxe-x86-64-w64-mingw32.static-fribidi \
          mxe-x86-64-w64-mingw32.static-libxml2 \
          mxe-x86-64-w64-mingw32.static-libcroco \
          mxe-x86-64-w64-mingw32.static-zlib

    # 4) 安装 Rust 并添加 Windows-GNU 目标
    - name: Install Rust toolchain
      run: |
        curl -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
        source "$HOME/.cargo/env"
        rustup target add x86_64-pc-windows-gnu
        echo "CARGO_HOME=$HOME/.cargo" >> "$GITHUB_ENV"

    # 5) 安装 Meson / Ninja
    - name: Install Meson & Ninja
      run: sudo apt-get install -y meson ninja-build gettext

    # 6) 获取 librsvg 2.60.0 源码
    - name: Checkout librsvg 2.60.0
      run: git clone --depth 1 --branch 2.60.0 https://gitlab.gnome.org/GNOME/librsvg.git

    # 7) 生成 Meson cross-file
    - name: Create Meson cross file
      working-directory: librsvg
      run: |
        cat > mxe-cross.txt <<'EOF'
        [binaries]
        c         = 'x86_64-w64-mingw32.static-gcc'
        cpp       = 'x86_64-w64-mingw32.static-g++'
        ar        = 'x86_64-w64-mingw32.static-ar'
        windres   = 'x86_64-w64-mingw32.static-windres'
        pkgconfig = 'x86_64-w64-mingw32.static-pkg-config'
        strip     = 'x86_64-w64-mingw32.static-strip'
        rust      = 'rustc'
        
        [properties]
        needs_exe_wrapper = true
        
        [built-in options]
        c_args        = ['-O2']
        cpp_args      = ['-O2']
        c_link_args   = ['-static']
        cpp_link_args = ['-static']
        default_library = 'static'
        EOF

    # 8) 配置 & 构建
    - name: Meson configure
      working-directory: librsvg
      env:
        CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32.static-gcc
        PKG_CONFIG_ALLOW_CROSS: "1"
        RUSTFLAGS: "-C target-feature=+crt-static -C linker=x86_64-w64-mingw32.static-gcc -C panic=abort"
      run: |
        meson setup build \
          --cross-file mxe-cross.txt \
          -Ddefault_library=static \
          -Dintrospection=disabled \
          -Dtests=false \
          -Db_lto=true

    - name: Build rsvg-convert
      working-directory: librsvg
      run: ninja -C build rsvg-convert

    # 9) Strip & 检查
    - name: Strip binary
      working-directory: librsvg
      run: |
        x86_64-w64-mingw32.static-strip build/rsvg-convert.exe
        file build/rsvg-convert.exe
        du -h build/rsvg-convert.exe

    # 10) 上传产物
    - uses: actions/upload-artifact@v4
      with:
        name: rsvg-convert-2.60.0-win64-static
        path: librsvg/build/rsvg-convert.exe
