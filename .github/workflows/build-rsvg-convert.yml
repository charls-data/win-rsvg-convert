# .github/workflows/windows-librsvg.yml
name: Build librsvg on Windows 2022

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    env:
      WORKSPACE: ${{ github.workspace }}
      INST: ${{ github.workspace }}\rsvg.ci.bin
      INST_PSX: ${{ github.workspace }}/rsvg.ci.bin
      LIBXML2_VER: 2.12.6
      FREETYPE2_VER: 2.13.0
      PKG_CONFIG_VER: 0.29.2
      RUST_HOST: x86_64-pc-windows-msvc
      MSYS2_BIN: C:\msys64\usr\bin

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install Meson via pip
        run: |
          pip3 install --upgrade --user "meson~=1.2"

      - name: Add Meson & Cargo to PATH
        shell: cmd
        run: |
          echo %USERPROFILE%\AppData\Roaming\Python\Python39\Scripts>>%GITHUB_PATH%
          echo %USERPROFILE%\.cargo\bin>>%GITHUB_PATH%

      - name: Verify Meson & Cargo
        shell: cmd
        run: |
          meson --version
          cargo --version
          where.exe patch

      - name: Fetch & unpack pkg-config, FreeType, libxml2
        shell: cmd
        run: |
          curl -L https://pkgconfig.freedesktop.org/releases/pkg-config-%PKG_CONFIG_VER%.tar.gz -o pkg-config.tar.gz
          curl -L https://downloads.sourceforge.net/freetype/freetype-%FREETYPE2_VER%.tar.xz -o freetype.tar.xz
          curl -L https://download.gnome.org/sources/libxml2/2.12/libxml2-%LIBXML2_VER%.tar.xz -o libxml2.tar.xz
          "%MSYS2_BIN%\tar.exe" -xf pkg-config.tar.gz
          "%MSYS2_BIN%\tar.exe" -xf freetype.tar.xz
          "%MSYS2_BIN%\tar.exe" -xf libxml2.tar.xz
          curl -L https://wrapdb.mesonbuild.com/v2/libxml2_%LIBXML2_VER%-1/get_patch -o libxml2_patch.zip
          powershell -Command "Expand-Archive libxml2_patch.zip libxml2_patch"
          del /f /q pkg-config.tar.gz freetype.tar.xz libxml2.tar.xz libxml2_patch.zip

      - name: Build pkg-config
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          cd pkg-config-%PKG_CONFIG_VER%
          "C:\Program Files\Git\usr\bin\patch.exe" -p1 < "%WORKSPACE%\pkgconfig.nmake.patch"
          set PATH=%INST%\bin;%PATH%
          nmake /f Makefile.vc CFG=release
          copy /b release\x64\pkg-config.exe %INST%\bin
          nmake /f Makefile.vc CFG=release clean
          cd ..
          where.exe pkg-config.exe

      - name: Build gdk-pixbuf
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/gdk-pixbuf.git
          md _build_gdk_pixbuf && cd _build_gdk_pixbuf
          meson setup ..\gdk-pixbuf --buildtype=release --prefix=%INST_PSX% -Dman=false
          ninja install
          cd .. && rmdir /s /q _build_gdk_pixbuf
          copy /b %INST%\lib\z.lib %INST%\lib\zlib.lib

      - name: Build FreeType
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          md _build_ft && cd _build_ft
          set PATH=%INST%\bin;%PATH%
          meson setup ..\freetype-%FREETYPE2_VER% --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST%
          ninja install
          cd .. && rmdir /s /q _build_ft

      - name: Build libxml2
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          md _build_libxml && cd _build_libxml
          set PATH=%INST%\bin;%PATH%
          meson setup ..\libxml2-%LIBXML2_VER% --buildtype=release --prefix=%INST_PSX% -Diconv=disabled --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST%
          ninja install
          cd .. && rmdir /s /q _build_libxml

      - name: Build Pango
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/pango.git
          md _build_pango && cd _build_pango
          set PATH=%INST%\bin;%PATH%
          meson setup ..\pango --buildtype=release --prefix=%INST_PSX% -Dfontconfig=disabled --pkg-config-path=%INST%\lib\pkgconfig
          ninja install
          cd .. && rmdir /s /q _build_pango

      - name: Ensure Rust toolchain & cargo-c
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          rustup default stable-%RUST_HOST%
          if not exist %USERPROFILE%\.cargo\bin\cargo-cbuild.exe (
            cargo install cargo-c
          )

      - name: Build librsvg
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/librsvg.git
          md librsvg\msvc-build && cd librsvg\msvc-build
          set PATH=%INST%\bin;%USERPROFILE%\.cargo\bin;%PATH%
          if exist %INST%\lib\libpcre2-8.a copy /b %INST%\lib\libpcre2-8.a %INST%\lib\pcre2-8.lib
          if "%DOWNGRADE_RUST_VERSION%" == "1" (
            set RUST_DOWNGRADE_VER=1.82.0
            rustup install "%RUST_DOWNGRADE_VER%-%RUST_HOST%"
            meson setup .. --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST% -Dtriplet=%RUST_HOST% -Drustc-version=%RUST_DOWNGRADE_VER%
          ) else (
            meson setup .. --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST%
          )
          ninja && ninja test && ninja install

      - name: Upload install folder
        uses: actions/upload-artifact@v4
        with:
          name: librsvg-install
          path: rsvg.ci.bin/**
