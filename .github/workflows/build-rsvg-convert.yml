name: Build rsvg-convert-2.60.0 (MXE binary + Rust static Win-x64)

on:
  push:

jobs:
  build:
    runs-on: ubuntu-22.04        # jammy runner 没问题，仓库用 focal

    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 1 }

    # 1️⃣  添加 MXE 仓库（固定 focal）+ 两把 GPG 密钥
    - name: Add MXE repo & keys
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends gnupg dirmngr

        # 两把签名钥匙：86B72ED9（旧）+ 33A3A276（新）
        gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 \
            --recv-keys 86B72ED9 33A3A276 || true

        sudo mkdir -p /usr/share/keyrings
        gpg --batch --export 86B72ED9 33A3A276 \
            | sudo tee /usr/share/keyrings/mxe.gpg >/dev/null

        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/mxe.gpg] \
             https://pkg.mxe.cc/repos/apt focal main" \
          | sudo tee /etc/apt/sources.list.d/mxe.list

        # 若第二把钥匙仍未同步，重试失败时降级 trusted=yes
        if ! sudo apt-get update -qq; then
          echo "::warning ::MXE repo signature check failed – falling back to trusted=yes"
          echo "deb [arch=amd64 trusted=yes] https://pkg.mxe.cc/repos/apt focal main" \
            | sudo tee /etc/apt/sources.list.d/mxe.list
          sudo apt-get update -qq
        fi

    # 2️⃣  安装交叉工具链 + librsvg 依赖（包名与 MXE 数据库一致）
    - name: Install MXE toolchain & libs
      run: |
        sudo apt-get install -y \
          mxe-x86-64-w64-mingw32.static-gcc \
          mxe-x86-64-w64-mingw32.static-pkgconf \
          mxe-x86-64-w64-mingw32.static-glib \
          mxe-x86-64-w64-mingw32.static-cairo \
          mxe-x86-64-w64-mingw32.static-pango \
          mxe-x86-64-w64-mingw32.static-gdk-pixbuf \
          mxe-x86-64-w64-mingw32.static-harfbuzz \
          mxe-x86-64-w64-mingw32.static-fribidi \
          mxe-x86-64-w64-mingw32.static-libxml2 \
          mxe-x86-64-w64-mingw32.static-libcroco \
          mxe-x86-64-w64-mingw32.static-zlib

        # ➜ 把 MXE bin 目录加入 PATH，供 Meson 找到交叉编译器
        echo "/usr/lib/mxe/usr/bin" >> $GITHUB_PATH

    # 3️⃣  安装 Rust 并启用 Windows-GNU 目标
    - name: Install Rust toolchain + prebuilt cargo-c
      run: |
        # 1️⃣ 安装 stable Rust（默认路径 ~/.cargo）
        curl -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
        source "$HOME/.cargo/env"
        rustup target add x86_64-pc-windows-gnu

        # ── ② 下载并解包 cargo-c 静态 musl 版 (≈5 s) ────────────────
        CARGO_C_VER="0.10.12"
        ASSET="cargo-c-x86_64-unknown-linux-musl.tar.gz"
        URL="https://github.com/lu-zero/cargo-c/releases/download/v${CARGO_C_VER}/${ASSET}"

        curl -fL "$URL" -o /tmp/${ASSET}

        # ③ 解包到临时目录，再复制可执行文件
        TMPDIR=$(mktemp -d)
        tar -xzf /tmp/${ASSET} -C "$TMPDIR"
        CARGO_BIN="$HOME/.cargo/bin"
        mkdir -p "$CARGO_BIN"
        find "$TMPDIR" -type f -perm -u+x -name 'cargo-c*' -exec cp {} "$CARGO_BIN" \;

        # 3️⃣ 把 ~/.cargo/bin 加入 PATH（供后续 Meson 调用）
        echo "$CARGO_BIN" >> "$GITHUB_PATH"

        # 4️⃣ 版本确认
        cargo --version
        cargo-cbuild --version

    # 4️⃣  安装 Ninja（APT） + 最新 Meson（pip ≥ 1.3.0）
    - name: Install Ninja & Meson >=1.3
      run: |
        sudo apt-get install -y ninja-build python3-pip python3-setuptools python3-wheel
        # 安装 / 升级 Meson 到最新稳定版（目前 1.4.x）
        python3 -m pip install --upgrade --no-cache-dir 'meson>=1.3'
        # 把 pip 安装路径加入 PATH，确保后续调用到新版本
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        meson --version    # sanity-check：应 ≥ 1.3.0

    # 5️⃣  获取 librsvg-2.60.0 源码
    - name: Clone librsvg 2.60.0
      run: git clone --depth 1 --branch 2.60.0 https://gitlab.gnome.org/GNOME/librsvg.git

    # 5️⃣½  ← 这里是新增的 wrap 步骤
    - name: Add cairo.wrap (1.18.0) for subprojects
      working-directory: librsvg
      run: |
        mkdir -p subprojects
        cat > subprojects/cairo.wrap <<'EOF'
        [wrap-git]
        directory = cairo-1.18.0
        url = https://gitlab.freedesktop.org/cairo/cairo.git
        revision = 1.18.0
        EOF

    - name: Add glib & pango wraps (glib-2.80.0 / pango-1.52.0)
      working-directory: librsvg
      run: |
        mkdir -p subprojects
        cat > subprojects/glib.wrap <<'EOF'
        [wrap-git]
        directory = glib-2.76.5
        url = https://gitlab.gnome.org/GNOME/glib.git
        revision = 2.76.5
        EOF
        cat > subprojects/pango.wrap <<'EOF'
        [wrap-git]
        directory = pango-1.50.14
        url = https://gitlab.gnome.org/GNOME/pango.git
        revision = 1.50.14
        EOF

    # 1) 生成 glib.wrap ，声明本地补丁
    - name: Add glib.wrap with patch_filename
      working-directory: librsvg
      run: |
        mkdir -p subprojects
        cat > subprojects/glib.wrap <<'EOF'
        [wrap-git]
        directory = glib-2.76.5
        url = https://gitlab.gnome.org/GNOME/glib.git
        revision = 2.76.5
        
        # 本地补丁，Meson 会在同目录下找这个文件
        patch_filename = _0001_win32_nt.patch
        patch_strip = 1
        EOF

    # 2) 将补丁文件放到同一目录：subprojects/
    - name: Create _0001_win32_nt.patch in subprojects
      working-directory: librsvg
      run: |
        cat > subprojects/_0001_win32_nt.patch <<'PATCH'
        --- a/meson.build
        +++ b/meson.build
        @@ -1793,7 +1793,7 @@
         # If we're cross-compiling on MinGW we won't have
         # a pre-defined _WIN32_WINNT, so we have to assume
         # something reasonably modern
        -  _WIN32_WINNT = cc.get_define('_WIN32_WINNT', prefix : '#include <windows.h>')
        +  _WIN32_WINNT = '0x0A00'  # force Windows 10; change to '0x0601' for Win7
        PATCH

    # 6️⃣  生成 Meson cross-file
    - name: Create Meson cross file
      working-directory: librsvg
      run: |
        cat > mxe-cross.txt <<'EOF'
        [binaries]
        c         = 'x86_64-w64-mingw32.static-gcc'
        cpp       = 'x86_64-w64-mingw32.static-g++'
        ar        = 'x86_64-w64-mingw32.static-ar'
        windres   = 'x86_64-w64-mingw32.static-windres'
        pkgconfig = 'x86_64-w64-mingw32.static-pkg-config'
        strip     = 'x86_64-w64-mingw32.static-strip'
        rust      = 'rustc'
        
        [properties]
        needs_exe_wrapper = true
        
        [built-in options]
        c_args  = ['-O2']
        cpp_args = ['-O2']
        c_link_args   = ['-static']
        cpp_link_args = ['-static']
        default_library = 'static'
        EOF

    # 7️⃣  配置 & 编译 rsvg-convert
    - name: Meson configure
      working-directory: librsvg
      env:
        CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32.static-gcc
        PKG_CONFIG_ALLOW_CROSS: "1"
        RUSTFLAGS: "-C target-feature=+crt-static -C linker=x86_64-w64-mingw32.static-gcc -C panic=abort"
      run: |
        meson setup build \
          --cross-file mxe-cross.txt \
          --wrap-mode=nodownload \
          -Ddefault_library=static \
          -Dintrospection=disabled \
          -Dtests=false \
          -Db_lto=true \
          -Dcairo:glib=enabled \
          -Dcairo:gobject=enabled \
          -Dglib:libmount=disabled \
          -Dglib:selinux=disabled \
          -Dglib:introspection=disabled \
          -Dglib:tests=false \
          -Dpango:introspection=disabled \
          -Dpango:tests=false
    - name: Build rsvg-convert.exe
      working-directory: librsvg
      run: ninja -C build rsvg-convert

    # 8️⃣  strip & check
    - name: Strip + size check
      working-directory: librsvg
      run: |
        x86_64-w64-mingw32.static-strip build/rsvg-convert.exe
        file build/rsvg-convert.exe
        du -h build/rsvg-convert.exe

    # 9️⃣  发布 artifact
    - uses: actions/upload-artifact@v4
      with:
        name: rsvg-convert-2.60.0-win64-static
        path: librsvg/build/rsvg-convert.exe
