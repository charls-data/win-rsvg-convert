# .github/workflows/build-rsvg-convert.yml
name: Build rsvg-convert-2.60.0 (MXE binary, static Win-x64)

on:
  push:            # 仅 push 触发；如需限定分支自行加 branches:

jobs:
  build:
    runs-on: ubuntu-22.04     # 官方 runner（jammy）

    steps:
    # ───────────────────────────────────────────────────────────────
    # 0) 拉取当前仓库（仅用于保存产物）
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    # ───────────────────────────────────────────────────────────────
    # 1) 安装 MXE 二进制发行版（官网 Step 3b）
    - name: Add MXE APT repo (focal) & import keys
      id: add-mxe
      run: |
        set -e
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends gnupg dirmngr software-properties-common lsb-release

        # 尝试导入两把仓库钥匙
        gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 \
            --recv-keys 86B72ED9 || true
        gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 \
            --recv-keys 33A3A276 || true

        sudo mkdir -p /usr/share/keyrings
        gpg --batch --export 86B72ED9 33A3A276 \
            | sudo tee /usr/share/keyrings/mxe.gpg >/dev/null || true

        # 写入 sources.list —— 固定 focal；默认使用签名校验
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/mxe.gpg] \
             https://pkg.mxe.cc/repos/apt focal main" \
          | sudo tee /etc/apt/sources.list.d/mxe.list

        # 初次更新，若因缺钥匙失败则改用 trusted=yes（降级方案）
        if ! sudo apt-get update -qq; then
          echo "::warning ::GPG key C6BF758A33A3A276 not found, falling back to trusted repo"
          echo "deb [arch=amd64 trusted=yes] https://pkg.mxe.cc/repos/apt focal main" \
            | sudo tee /etc/apt/sources.list.d/mxe.list
          sudo apt-get update -qq
        fi
    # ───────────────────────────────────────────────────────────────
    # 2) 安装交叉工具链 & librsvg 所需静态依赖
    - name: Install MXE toolchain & libraries
      run: |
        sudo apt-get install -y \
          mxe-x86-64-w64-mingw32.static-gcc \
          mxe-x86-64-w64-mingw32.static-pkgconf \
          mxe-x86-64-w64-mingw32.static-glib2 \
          mxe-x86-64-w64-mingw32.static-cairo \
          mxe-x86-64-w64-mingw32.static-pango \
          mxe-x86-64-w64-mingw32.static-gdk-pixbuf \
          mxe-x86-64-w64-mingw32.static-harfbuzz \
          mxe-x86-64-w64-mingw32.static-fribidi \
          mxe-x86-64-w64-mingw32.static-libxml2 \
          mxe-x86-64-w64-mingw32.static-libcroco \
          mxe-x86-64-w64-mingw32.static-zlib
    # ───────────────────────────────────────────────────────────────
    # 3) 安装 Rust 并启用 Windows-GNU 目标（librsvg≥2.50 必需）
    - name: Install Rust (stable) + x86_64-pc-windows-gnu
      run: |
        curl -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
        source "$HOME/.cargo/env"
        rustup target add x86_64-pc-windows-gnu
        echo "CARGO_HOME=$HOME/.cargo" >> "$GITHUB_ENV"
    # ───────────────────────────────────────────────────────────────
    # 4) 安装 Meson / Ninja（librsvg 用 Meson）
    - name: Install Meson & Ninja
      run: sudo apt-get install -y meson ninja-build gettext
    # ───────────────────────────────────────────────────────────────
    # 5) 获取 librsvg-2.60.0 源码
    - name: Clone librsvg-2.60.0
      run: git clone --depth 1 --branch 2.60.0 https://gitlab.gnome.org/GNOME/librsvg.git
    # ───────────────────────────────────────────────────────────────
    # 6) 生成 Meson cross-file（官方 Tutorial Step 4 环境变量改写）
    - name: Generate Meson cross file
      working-directory: librsvg
      run: |
        cat > mxe-cross.txt <<'EOF'
        [binaries]
        c         = 'x86_64-w64-mingw32.static-gcc'
        cpp       = 'x86_64-w64-mingw32.static-g++'
        ar        = 'x86_64-w64-mingw32.static-ar'
        windres   = 'x86_64-w64-mingw32.static-windres'
        pkgconfig = 'x86_64-w64-mingw32.static-pkg-config'
        strip     = 'x86_64-w64-mingw32.static-strip'
        rust      = 'rustc'
        
        [properties]
        needs_exe_wrapper = true
        
        [built-in options]
        c_args        = ['-O2']
        cpp_args      = ['-O2']
        c_link_args   = ['-static']
        cpp_link_args = ['-static']
        default_library = 'static'
        EOF

    # ───────────────────────────────────────────────────────────────
    # 7) 配置 & 编译 rsvg-convert
    - name: Configure with Meson
      working-directory: librsvg
      env:
        CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32.static-gcc
        PKG_CONFIG_ALLOW_CROSS: "1"
        RUSTFLAGS: "-C target-feature=+crt-static -C linker=x86_64-w64-mingw32.static-gcc -C panic=abort"
      run: |
        meson setup build \
          --cross-file mxe-cross.txt \
          -Ddefault_library=static \
          -Dintrospection=disabled \
          -Dtests=false \
          -Db_lto=true
    - name: Build rsvg-convert.exe
      working-directory: librsvg
      run: ninja -C build rsvg-convert
    # ───────────────────────────────────────────────────────────────
    # 8) Strip & 验证
    - name: Strip + size check
      working-directory: librsvg
      run: |
        x86_64-w64-mingw_
