# .github/workflows/windows-librsvg.yml
name: Build librsvg on Windows 2025

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2025

    env:
      # set this to 1 to downgrade the Rust version used for building librsvg
      DOWNGRADE_RUST_VERSION: 1

      # single source of truth for the install prefix
      INST: ${{ github.workspace }}\rsvg.ci.bin

      # derive all of your include/lib paths from INST
      PREFIX_INC: ${{ github.workspace }}\rsvg.ci.bin\include
      PREFIX_INC_GLIB: ${{ github.workspace }}\rsvg.ci.bin\include\glib-2.0
      PREFIX_INC_GLIB_INC: ${{ github.workspace }}\rsvg.ci.bin\lib\glib-2.0\include
      PREFIX_LIB: ${{ github.workspace }}\rsvg.ci.bin\lib

      # version pins
      LIBXML2_VER: 2.12.6
      FREETYPE2_VER: 2.13.0
      PKG_CONFIG_VER: 0.29.2
      RUST_HOST: x86_64-pc-windows-msvc

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install Meson via pip
        run: |
          pip3 install --upgrade --user "meson~=1.2"

      - name: Update Global ENV
        shell: cmd
        run: |
          echo %USERPROFILE%\AppData\Roaming\Python\Python39\Scripts>>%GITHUB_PATH%
          echo %USERPROFILE%\.cargo\bin>>%GITHUB_PATH%
          echo %INST%\bin>>%GITHUB_PATH%
          echo INST_PSX=%INST:\=/%>>%GITHUB_ENV%

      - name: Build gdk-pixbuf
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          set INCLUDE=%PREFIX_INC_GLIB%;%PREFIX_INC_GLIB_INC%;%PREFIX_INC%;%INCLUDE%
          set LIB=%PREFIX_LIB%;%LIB%
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/gdk-pixbuf.git
          md _build_gdk_pixbuf && cd _build_gdk_pixbuf
          meson setup ..\gdk-pixbuf --buildtype=release --prefix=%INST_PSX% -Dman=false -Dglycin=disabled -Ddefault_library=static
          ninja install
          cd .. && rmdir /s /q _build_gdk_pixbuf
          cd %INST%\lib
          echo "lib path contents:"
          dir
          copy /b %INST%\lib\libffi.a               %INST%\lib\ffi.lib
          copy /b %INST%\lib\libgdk_pixbuf-2.0.a    %INST%\lib\gdk_pixbuf-2.0.lib
          copy /b %INST%\lib\libgio-2.0.a           %INST%\lib\gio-2.0.lib
          copy /b %INST%\lib\libgirepository-2.0.a  %INST%\lib\girepository-2.0.lib
          copy /b %INST%\lib\libglib-2.0.a          %INST%\lib\glib-2.0.lib
          copy /b %INST%\lib\libgmodule-2.0.a       %INST%\lib\gmodule-2.0.lib
          copy /b %INST%\lib\libgobject-2.0.a       %INST%\lib\gobject-2.0.lib
          copy /b %INST%\lib\libgthread-2.0.a       %INST%\lib\gthread-2.0.lib
          copy /b %INST%\lib\libintl.a               %INST%\lib\intl.lib
          copy /b %INST%\lib\libjpeg.a               %INST%\lib\jpeg.lib
          copy /b %INST%\lib\libpcre2-16.a           %INST%\lib\pcre2-16.lib
          copy /b %INST%\lib\libpcre2-32.a           %INST%\lib\pcre2-32.lib
          copy /b %INST%\lib\libpcre2-8.a            %INST%\lib\pcre2-8.lib
          copy /b %INST%\lib\libpcre2-posix.a        %INST%\lib\pcre2-posix.lib
          copy /b %INST%\lib\libpng16.a              %INST%\lib\png16.lib
          copy /b %INST%\lib\libz.a                  %INST%\lib\z.lib
          copy /b %INST%\lib\libz.a                 %INST%\lib\zlib.lib

      - name: Fetch & unpack pkg-config, freetype, libxml2
        shell: cmd
        run: |
          curl -L https://pkgconfig.freedesktop.org/releases/pkg-config-%PKG_CONFIG_VER%.tar.gz -o pkg-config.tar.gz
          curl -L https://downloads.sourceforge.net/freetype/freetype-%FREETYPE2_VER%.tar.xz -o freetype.tar.xz
          curl -L https://download.gnome.org/sources/libxml2/2.12/libxml2-%LIBXML2_VER%.tar.xz -o libxml2.tar.xz
          tar -xf pkg-config.tar.gz
          tar -xf freetype.tar.xz
          tar -xf libxml2.tar.xz
          curl -L https://wrapdb.mesonbuild.com/v2/libxml2_%LIBXML2_VER%-1/get_patch -o libxml2_patch.zip
          tar -xf libxml2_patch.zip
          del /f /q pkg-config.tar.gz freetype.tar.xz libxml2.tar.xz libxml2_patch.zip

      - name: Build pkg-config
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          set INCLUDE=%PREFIX_INC_GLIB%;%PREFIX_INC_GLIB_INC%;%PREFIX_INC%;%INCLUDE%
          set LIB=%PREFIX_LIB%;%LIB%
          cd pkg-config-%PKG_CONFIG_VER%
          copy /Y "%GITHUB_WORKSPACE%\pkgconfig-Makefile.vc" "Makefile.vc"

          nmake /f Makefile.vc CFG=release
          copy /b release\x64\pkg-config.exe %INST%\bin
          nmake /f Makefile.vc CFG=release clean
          cd ..
          echo "pkg-config.exe path:"
          where.exe pkg-config.exe

      - name: Build FreeType
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          set INCLUDE=%PREFIX_INC_GLIB%;%PREFIX_INC_GLIB_INC%;%PREFIX_INC%;%INCLUDE%
          set LIB=%PREFIX_LIB%;%LIB%
          md _build_ft && cd _build_ft
          meson setup ..\freetype-%FREETYPE2_VER% --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST% -Ddefault_library=static
          ninja install
          cd .. && rmdir /s /q _build_ft
          cd %INST%\lib
          echo "lib path contents:"
          dir
          copy /b %INST%\lib\libfreetype.a             %INST%\lib\freetype.lib

      - name: Build libxml2
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          set INCLUDE=%PREFIX_INC_GLIB%;%PREFIX_INC_GLIB_INC%;%PREFIX_INC%;%INCLUDE%
          set LIB=%PREFIX_LIB%;%LIB%
          md _build_libxml && cd _build_libxml
          meson setup ..\libxml2-%LIBXML2_VER% --buildtype=release --prefix=%INST_PSX% -Diconv=disabled --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST% -Ddefault_library=static
          ninja install
          cd .. && rmdir /s /q _build_libxml
          cd %INST%\lib
          echo "lib path contents:"
          dir
          copy /b %INST%\lib\libxml2.a                 %INST%\lib\xml2.lib

      - name: Build Pango
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          set INCLUDE=%PREFIX_INC_GLIB%;%PREFIX_INC_GLIB_INC%;%PREFIX_INC%;%INCLUDE%
          set LIB=%PREFIX_LIB%;%LIB%
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/pango.git
          md _build_pango && cd _build_pango
          meson setup ..\pango --buildtype=release --prefix=%INST_PSX% -Dfontconfig=disabled --pkg-config-path=%INST%\lib\pkgconfig -Ddefault_library=static
          ninja install
          cd .. && rmdir /s /q _build_pango
          cd %INST%\lib
          echo "lib path contents:"
          dir
          copy /b %INST%\lib\libcairo-gobject.a              %INST%\lib\cairo-gobject.lib
          copy /b %INST%\lib\libcairo-script-interpreter.a   %INST%\lib\cairo-script-interpreter.lib
          copy /b %INST%\lib\libcairo.a                      %INST%\lib\cairo.lib
          copy /b %INST%\lib\libfribidi.a                    %INST%\lib\fribidi.lib
          copy /b %INST%\lib\libharfbuzz-gobject.a           %INST%\lib\harfbuzz-gobject.lib
          copy /b %INST%\lib\libharfbuzz-gobject.a           %INST%\lib\harfbuzz-gobject.lib
          copy /b %INST%\lib\libharfbuzz.a                   %INST%\lib\harfbuzz.lib
          copy /b %INST%\lib\libpango-1.0.a                  %INST%\lib\pango-1.0.lib
          copy /b %INST%\lib\libpangocairo-1.0.a             %INST%\lib\pangocairo-1.0.lib
          copy /b %INST%\lib\libpangowin32-1.0.a             %INST%\lib\pangowin32-1.0.lib
          copy /b %INST%\lib\libpixman-1.a                   %INST%\lib\pixman-1.lib

      - name: Ensure Rust toolchain & cargo-c
        shell: cmd
        run: |
          if not exist %USERPROFILE%\.cargo\bin\cargo-cbuild.exe (
            cargo install cargo-c
          )
          set RUST_DOWNGRADE_VER=1.82.0
          rustup install %RUST_DOWNGRADE_VER%-%RUST_HOST%

      - name: Build librsvg
        shell: cmd
        run: |
          call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          set INCLUDE=%PREFIX_INC_GLIB%;%PREFIX_INC_GLIB_INC%;%PREFIX_INC%;%INCLUDE%
          set LIB=%PREFIX_LIB%;%LIB%
          set PKG_CONFIG=%INST%\bin\pkg-config.exe
          git clone --depth 1 --no-tags https://gitlab.gnome.org/GNOME/librsvg.git
          copy /Y "%GITHUB_WORKSPACE%\rsvg-meson.build" "librsvg\rsvg\meson.build"
          md librsvg\msvc-build && cd librsvg\msvc-build
          if "%DOWNGRADE_RUST_VERSION%" == "1" (
            meson setup .. --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST% -Dtriplet=%RUST_HOST% -Drustc-version=%RUST_DOWNGRADE_VER% -Ddefault_library=static
          ) else (
            meson setup .. --buildtype=release --prefix=%INST_PSX% --pkg-config-path=%INST%\lib\pkgconfig --cmake-prefix-path=%INST% -Ddefault_library=static
          )
          ninja && ninja install

      - name: Upload install folder
        uses: actions/upload-artifact@v4
        with:
          name: librsvg-windows
          path: rsvg.ci.bin/**
