name: Build rsvg-convert-2.60.0 (MXE binary + Rust static Win-x64)

on:
  push:

jobs:
  build:
    runs-on: ubuntu-22.04        # jammy runner 没问题，仓库用 focal

    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 1 }

    # 1️⃣  添加 MXE 仓库（固定 focal）+ 两把 GPG 密钥
    - name: Add MXE repo & keys
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends gnupg dirmngr

        # 两把签名钥匙：86B72ED9（旧）+ 33A3A276（新）
        gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 \
            --recv-keys 86B72ED9 33A3A276 || true

        sudo mkdir -p /usr/share/keyrings
        gpg --batch --export 86B72ED9 33A3A276 \
            | sudo tee /usr/share/keyrings/mxe.gpg >/dev/null

        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/mxe.gpg] \
             https://pkg.mxe.cc/repos/apt focal main" \
          | sudo tee /etc/apt/sources.list.d/mxe.list

        # 若第二把钥匙仍未同步，重试失败时降级 trusted=yes
        if ! sudo apt-get update -qq; then
          echo "::warning ::MXE repo signature check failed – falling back to trusted=yes"
          echo "deb [arch=amd64 trusted=yes] https://pkg.mxe.cc/repos/apt focal main" \
            | sudo tee /etc/apt/sources.list.d/mxe.list
          sudo apt-get update -qq
        fi

    # 2️⃣  安装交叉工具链 + librsvg 依赖（包名与 MXE 数据库一致）
    - name: Install MXE toolchain & libs
      run: |
        sudo apt-get install -y \
          mxe-x86-64-w64-mingw32.static-gcc \
          mxe-x86-64-w64-mingw32.static-pkgconf \
          mxe-x86-64-w64-mingw32.static-glib \
          mxe-x86-64-w64-mingw32.static-cairo \
          mxe-x86-64-w64-mingw32.static-pango \
          mxe-x86-64-w64-mingw32.static-gdk-pixbuf \
          mxe-x86-64-w64-mingw32.static-harfbuzz \
          mxe-x86-64-w64-mingw32.static-fribidi \
          mxe-x86-64-w64-mingw32.static-libxml2 \
          mxe-x86-64-w64-mingw32.static-libcroco \
          mxe-x86-64-w64-mingw32.static-zlib

        # ➜ 把 MXE bin 目录加入 PATH，供 Meson 找到交叉编译器
        echo "/usr/lib/mxe/usr/bin" >> $GITHUB_PATH

    # 3️⃣  安装 Rust 并启用 Windows-GNU 目标
    - name: Install Rust toolchain + prebuilt cargo-c
      run: |
        # 1️⃣ 安装 stable Rust（默认路径 ~/.cargo）
        curl -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
        source "$HOME/.cargo/env"
        rustup target add x86_64-pc-windows-gnu

        # ── ② 下载并解包 cargo-c 静态 musl 版 (≈5 s) ────────────────
        CARGO_C_VER="0.10.12"
        ASSET="cargo-c-x86_64-unknown-linux-musl.tar.gz"
        URL="https://github.com/lu-zero/cargo-c/releases/download/v${CARGO_C_VER}/${ASSET}"

        curl -fL "$URL" -o /tmp/${ASSET}

        # ③ 解包到临时目录，再复制可执行文件
        TMPDIR=$(mktemp -d)
        tar -xzf /tmp/${ASSET} -C "$TMPDIR"
        CARGO_BIN="$HOME/.cargo/bin"
        mkdir -p "$CARGO_BIN"
        find "$TMPDIR" -type f -perm -u+x -name 'cargo-c*' -exec cp {} "$CARGO_BIN" \;

        # 3️⃣ 把 ~/.cargo/bin 加入 PATH（供后续 Meson 调用）
        echo "$CARGO_BIN" >> "$GITHUB_PATH"

        # 4️⃣ 版本确认
        cargo --version
        cargo-cbuild --version

    # 4️⃣  安装 Ninja（APT） + 最新 Meson（pip ≥ 1.3.0）
    - name: Install Ninja & Meson >=1.3
      run: |
        sudo apt-get install -y ninja-build python3-pip python3-setuptools python3-wheel
        # 安装 / 升级 Meson 到最新稳定版（目前 1.4.x）
        python3 -m pip install --upgrade --no-cache-dir 'meson>=1.3'
        # 把 pip 安装路径加入 PATH，确保后续调用到新版本
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        meson --version    # sanity-check：应 ≥ 1.3.0

    # 5️⃣  获取 librsvg-2.60.0 源码
    - name: Clone librsvg 2.60.0
      run: git clone --depth 1 --branch 2.60.0 https://gitlab.gnome.org/GNOME/librsvg.git

    # 5️⃣½  ← 这里是新增的 wrap 步骤
    - name: Add cairo.wrap (1.18.0) for subprojects
      working-directory: librsvg
      run: |
        mkdir -p subprojects
        cat > subprojects/cairo.wrap <<'EOF'
        [wrap-git]
        directory = cairo-1.18.0
        url = https://gitlab.freedesktop.org/cairo/cairo.git
        revision = 1.18.0
        EOF
        cat > subprojects/pango.wrap <<'EOF'
        [wrap-git]
        directory = pango-1.50.0
        url = https://gitlab.gnome.org/GNOME/pango.git
        revision = 1.50.0
        EOF
        cat > subprojects/harfbuzz.wrap <<'EOF'
        [wrap-git]
        directory = harfbuzz-11.0.0
        url = https://github.com/harfbuzz/harfbuzz.git
        revision = 11.0.0
        EOF

    # —— 1) 生成 glib.wrap，指向本地打包好的 patch archive ——  
    - name: Write glib.wrap with patch_url pointing to tarball
      working-directory: librsvg
      run: |
        mkdir -p subprojects
        cat > subprojects/glib.wrap <<'EOF'
        [wrap-git]
        directory = glib-2.84.0
        url = https://gitlab.gnome.org/GNOME/glib.git
        revision = 2.84.0
        
        # 下面三行让 Meson 自动解包并打我们的 patch
        patch_directory = glib
        patch_strip = 0
        EOF

    # —1— 在 subprojects/packagefiles/glib 下放置完整的自定义 meson.build
    - name: Prepare glib overlay directory
      working-directory: librsvg
      run: |
        mkdir -p subprojects/packagefiles/glib
        # 将仓库根的 glib_meson.build 复制进去并重命名为 meson.build
        cp ../glib_meson.build subprojects/packagefiles/glib/meson.build

    # 6️⃣  生成 Meson cross-file
    - name: Create Meson cross file
      working-directory: librsvg
      run: |
        cat > mxe-cross.txt <<'EOF'
        [binaries]
        c         = 'x86_64-w64-mingw32.static-gcc'
        cpp       = 'x86_64-w64-mingw32.static-g++'
        ar        = 'x86_64-w64-mingw32.static-ar'
        windres   = 'x86_64-w64-mingw32.static-windres'
        pkg-config = 'x86_64-w64-mingw32.static-pkg-config'
        strip     = 'x86_64-w64-mingw32.static-strip'
        rust      = 'rustc'
        
        [properties]
        needs_exe_wrapper = true
        
        [built-in options]
        c_args        = ['-O2', '-w']
        cpp_args      = ['-O2', '-std=c++11', '-w']
        c_link_args   = ['-static']
        cpp_link_args = ['-static']
        default_library = 'static'

        [host_machine]
        system     = 'windows'
        cpu_family = 'x86_64'
        cpu        = 'x86_64'
        endian     = 'little'
        EOF

    # 7️⃣  配置 & 编译 rsvg-convert
    - name: Meson configure
      working-directory: librsvg
      env:
        CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32.static-gcc
        PKG_CONFIG_ALLOW_CROSS: "1"
        RUSTFLAGS: "-C target-feature=+crt-static -C linker=x86_64-w64-mingw32.static-gcc -C panic=abort"
      run: |
        meson setup build \
          --cross-file mxe-cross.txt \
          --wrap-mode=forcefallback \
          -Ddefault_library=static \
          -Dintrospection=disabled \
          -Dtests=false \
          -Db_lto=true \
          -Dcairo:glib=enabled \
          -Dcairo:gobject=enabled \
          -Dglib:libmount=disabled \
          -Dglib:selinux=disabled \
          -Dglib:introspection=disabled \
          -Dglib:tests=false \
          -Dpango:introspection=disabled \
          -Dpango:tests=false \
          -Dglib:xattr=false

    - name: Apply Cairo LZO pointer-type patches
      working-directory: librsvg
      run: |
        # 修复 cairo-script-operators.c 中的指针类型问题
        sed -i '3005c\
        (Bytef *) data, (lzo_uint *)&out,' \
        subprojects/cairo-1.18.0/util/cairo-script/cairo-script-operators.c

        # 修复 cairo-script-file.c 中的指针类型问题
        sed -i '191c\
        (lzo_bytep) tmp_str->string, (lzo_uint *)&len,' \
        subprojects/cairo-1.18.0/util/cairo-script/cairo-script-file.c

        sed -i '1603c\
        (lzo_bytep) mem, (lzo_uint *)&mem_len,' \
        subprojects/cairo-1.18.0/util/cairo-script/cairo-script-scanner.c

        # sed -i '1636c\
        # (lzo_bytep) mem, (lzo_uint *)&mem_len,' \
        # subprojects/cairo-1.18.0/util/cairo-script/cairo-script-scanner.c

    - name: Fix Cairo DWrite font subpixel_order type
      working-directory: librsvg
      run: |
        sed -i '273s/auto subpixel_order/cairo_subpixel_order_t subpixel_order/' subprojects/cairo-1.18.0/src/win32/cairo-dwrite-font.cpp
        # sed -i 's/nullptr/NULL/g' subprojects/cairo-1.18.0/src/win32/cairo-dwrite-font.cpp

    - name: Build rsvg-convert.exe
      working-directory: librsvg
      env:
        GLIB_SYS_NO_PKG_CONFIG: "1"

      run: meson compile -C build

    # 8️⃣  strip & check
    - name: Strip + size check
      working-directory: librsvg
      run: |
        x86_64-w64-mingw32.static-strip build/rsvg-convert.exe
        file build/rsvg-convert.exe
        du -h build/rsvg-convert.exe

    # 9️⃣  发布 artifact
    - uses: actions/upload-artifact@v4
      with:
        name: rsvg-convert-2.60.0-win64-static
        path: librsvg/build/rsvg-convert.exe
